
{
  config,
  lib,
  pkgs,
  ...
}: let
  inherit
    (lib)
    mkOption
    types
    mkIf
    ;
  inherit
    (builtins)
    listToAttrs
    map
    concatStringsSep
    attrValues
    toString
    ;

  cfg = config.services.jellyseerr;

  curl_base = api_key_path: base_url: type: url: t: data:
  # bash
  ''
    cat "${pkgs.writeText "data.json" (builtins.toJSON data)}" \
    ${t}| ${pkgs.curl}/bin/curl \
        --silent \
        --show-error \
        --retry 3 \
        --retry-connrefused \
        --url "${base_url}${url}" \
        -X ${type} \
        -H "Authorization: MediaBrowser Token="$(cat "${api_key_path}")"" \
        -H "Content-Type: application/json" \
        --data-binary @-'';

  json-file-resolve =
    pkgs.writers.writePython3Bin "json-file-resolve" {
      libraries = with pkgs.python3Packages; [
        jsonpath-ng
      ];
    } ''
      import json
      import jsonpath_ng.ext as jsonpath
      import sys


      def func(_, data, field):
          file_path = data[field]

          with open(file_path) as f:
              return f.read().strip()


      json_data_raw = sys.stdin.read()
      data = json.loads(json_data_raw)
      for arg in sys.argv[1:]:
          jsonpath.parse(arg).update(data, func)

      print(json.dumps(data, indent=2))
    '';

  curl = curl_base cfg.apiKeyFile "http://localhost:${toString cfg.port}/api/v1";
in {
  options.services.jellyseerr = let
    permissionType = types.submodule (
      {config, ...}: let
        # https://github.com/fallenbagel/jellyseerr/blob/c7284f473c43634b3a324f3b11a9a60990b3c0da/server/lib/permissions.ts#L1
        permList = [
          "admin"
          "manageSettings"
          "manageUsers"
          "manageRequests"
          "request"
          "vote"
          "autoApprove"
          "autoApproveMovie"
          "autoApproveTv"
          "request4k"
          "request4kMovie"
          "request4kTv"
          "requestAdvanced"
          "requestView"
          "autoApprove4k"
          "autoApprove4kMovie"
          "autoApprove4kTv"
          "requestMovie"
          "requestTv"
          "manageIssues"
          "viewIssues"
          "createIssues"
          "autoRequest"
          "autoRequestMovie"
          "autoRequestTv"
          "recentView"
          "watchlistView"
          "manageBlacklist"
          "viewBlacklist"
        ];
      in {
        options =
          (listToAttrs (
            map (p: {
              name = p;
              value = mkOption {
                default = false;
                type = types.bool;
              };
            })
            permList
          ))
          // {
            finalNumber = mkOption {
              description = ''
                The final combined permission number, each permission is a
                bit in it. Derrived from the "permissions" options. Id
                recommend not setting this manually.
              '';
              default = let
                pow = a: b:
                  if b == 0
                  then a
                  else (pow a (b - 1));
                sum = lib.foldr (a: b: a + b) 0;
              in
                # convert the perm list to a number where each item is a bit
                sum (lib.imap1 (i: v:
                  if config.${v}
                  then (pow 2 i)
                  else 0)
                permList);
            };
          };
      }
    );
  in {
    extraSettings = mkOption {
      description = ''
        Mimics jellyseers settings.json, refer to it for info. Most options
        will be auto generated by jellyseer if not provided. Overrides the
        settings

        jellyfin.libraries.[].id will be autogenerated
      '';
      type = types.attrs;
      default = {};
    };
    settings.main.defaultPermissions = mkOption {
      description = ''
        The default permissions for new users, eg users created when a person
        initialy logs it with jellyfin.
      '';
      type = permissionType;
    };
    apiKeyFile = mkOption {
      type = types.str;
    };
    jellyfin = {
      username = mkOption {
        type = types.str;
        description = ''
          An admin user
        '';
      };
      email = mkOption {
        type = types.str;
      };
      passwordFile = mkOption {
        type = types.str;
      };
    };
    dataDir = mkOption {
      type = types.path;
      default = "/var/lib/jellyseerr";
    };

  config = let
    finalSettings = let
      s = cfg.setttings;
    in
      builtins.toJSON ({
          main.defaultPermissions = s.main.defaultPermissions.finalNumber;
        }
        // cfg.extraSettings);

    genfolderuuid =
      pkgs.writeShellScript "genfolderuuid"
      # bash
      ''
        key="root\\default\\$1"
        type="mediabrowser.controller.entities.collectionfolder"

        # concatenate type.fullname + key
        input="''${type}''${key}"

        # convert to utf-16le and hash with md5
        md5hex=$(echo -n "$input" | ${pkgs.iconv}/bin/iconv -f utf-8 -t utf-16le | md5sum | ${pkgs.gawk}/bin/awk '{print $1}')

        # format as guid with .net byte order (little-endian for first 3 fields)
        a="''${md5hex:6:2}''${md5hex:4:2}''${md5hex:2:2}''${md5hex:0:2}"
        b="''${md5hex:10:2}''${md5hex:8:2}"
        c="''${md5hex:14:2}''${md5hex:12:2}"
        d="''${md5hex:16:4}"
        e="''${md5hex:20:12}"

        guid="''${a}''${b}''${c}''${d:0:4}''${d:4:8}''${e}"

        # lowercase to match .net format
        echo "$(echo $guid | tr '[:upper:]' '[:lower:]')"
      '';

    sq = "${pkgs.sqlite}/bin/sqlite3 $db_file";

    nullEmpty = d:
      if d == null
      then ""
      else d;

    jellyseerr-init =
      pkgs.writeShellScript "jellyseerr-init"
      ''
        db_file="${cfg.configDir}/db/db.sqlite3"
        settings=$(cat "$CREDENTIALS_DIRECTORY/config")
        cfg_file="${cfg.configDir}/settings.json"

        echo "Starting jellyseerr to generate db..."
        ${lib.getExe cfg.package} &
        jellyfin_pid=$!

        sleep 3

        echo "Creating base jellyfin admin user"
        # https://github.com/fallenbagel/jellyseerr/blob/b83367cbf2e0470cc1ad4eed8ec6eafaafafdbad/server/routes/auth.ts#L226
        ${curl "POST" "/auth/jellyfin" ''
            | ${json-file-resolve}/bin/json-file-resolve \
              '$.password' \
          '' {
            serverType = 2; # jellyfin

            inherit (cfg.jellyfin) username email;
            password = cfg.jellyfin.passwordFile;

            inherit (cfg.extraSettings.jellyfin) port;
            useSsl = cfg.extraSettings.jellyfin.useSsl or false;
            urlBase = cfg.extraSettings.jellyfin.urlBase or "";
            hostname = cfg.extraSettings.jellyfin.ip;
          }}

        echo "Updating settings.json..."
        cfg="{}"
        if [ -f "$cfg_file" ]; then
          cfg=$(cat "$cfg_file")
        else
          mkdir -p "$(dirname "$cfg_file")"
          touch "$cfg_file"
        fi

        # Generate the library ids
        new_ids_json=$(echo "$settings" |\
          ${pkgs.jq}/bin/jq -r '.jellyfin.libraries[].name' |\
          while IFS= read -r name; do
           ${genfolderuuid} "$name"
          done |\
          ${pkgs.jq}/bin/jq -R -s 'split("\n") | .[:-1]')

        updated_settings=$(echo "$settings" |\
          ${pkgs.jq}/bin/jq \
          --argjson new_ids "$new_ids_json" \
          '.jellyfin.libraries |= (reduce (to_entries[]) as $entry ([]; . + [ $entry.value | .id = $new_ids[$entry.key] ]))'
        )

        echo "$cfg" "$updated_settings" |\
          ${pkgs.jq}/bin/jq --slurp 'reduce .[] as $item ({}; . * $item)' \
          > "$cfg_file"


        echo "Waiting for db to be created..."
        until [ -f "$db_file" ]
        do
          sleep 1
        done

        echo "Waiting for the users table to be created..."
        while true; do
          ${pkgs.sqlite}/bin/sqlite3 $db_file "
          SELECT 1 FROM sqlite_master
          WHERE type='table'
          AND name='user';
          " > /dev/null 2>&1

          if [ $? -eq 0 ]; then
            break
          fi

          sleep 1
        done

        echo "Creating users..."
        ${concatStringsSep "" (
          map (user: ''
            echo "Creating \"${user.name}\""

            user_id="${builtins.hashString "md5" user.name}"

            psw="${nullEmpty user.password}"
            psw_file="$CREDENTIALS_DIRECTORY/psw_file_$user_id"

            if [ -z "$psw" ] && [ -f "$psw_file" ]; then
              psw=$(cat "$psw_file")
            fi

            psw_hash="${nullEmpty user.password}";
            psw_hash_file="$CREDENTIALS_DIRECTORY/psw_hash_file$user_id"

            if [ -z "$psw_hash" ] && [ -f "$psw_hash_file" ]; then
              psw_hash=$(cat "$psw_hash_file")
            fi

            if [ -z "$psw_hash" ] && [ -n "$psw" ]; then
              psw_hash=$(
                ${pkgs.apacheHttpd}/bin/htpasswd -bnBC 12 "" "$psw" \
                | tr -d ':\n' \
                | sed 's/^.../$2b/' # change bcrypt prefix
                # https://github.com/kelektiv/node.bcrypt.js/blob/86c2b6644b67d544dbc7870924b852615c71dbcb/README.md?plain=1#L54
              )
            fi

            # echo "psw: $psw"
            # echo "hash: $psw_hash"

            userExists=$(${sq} "
              SELECT 1 FROM user
              WHERE Username = '${user.name}'
            ")

            if [ -z "$userExists" ]; then
              ${sq} "
                INSERT INTO user (
                  email,
                  username,
                  avatar
                ) VALUES (
                  'temp_email',
                  '${user.name}',
                  'temp_avatar'
                )
              "
            fi

            if [ -z "$userExists" ] || [ '${toString user.mutable}' != '1' ]; then
              ${sq} "
                UPDATE user SET
                  email = '${user.email}',
                  permissions = ${toString user.permissions.finalNumber},
                  avatar = 'https://gravatar.com/avatar/187f0ef5fecdebc4103c11399a7a9486?default=mm&size=200',
                  password = '$psw_hash',
                  userType = 2
                WHERE
                  username = '${user.name}';
              "
            else
              echo "Skipping user since it exists and mutable is true"
            fi
          '')
          (attrValues cfg.users)
        )}

        echo "Restating jellyseerr to make it pick up the cfg/db changes"
        kill -15 $jellyfin_pid
        ${lib.getExe cfg.package}
      '';
    # https://gist.github.com/nielsvanvelzen/ea047d9028f676185832e51ffaf12a6f
  in
    mkIf cfg.enable {
      sops.templates."jellyseerr-config.json".content = finalSettings;

      systemd.services.jellyseerr = {
        after = ["jellyfin.service"];
        serviceConfig = {
          WorkingDirectory = cfg.dataDir;
          ExecStart = lib.mkForce "${jellyseerr-init}";
          # ExecStart = lib.mkForce "/var/lib/jellyseerr/test.sh";
          LoadCredential =
            [
              "config:${config.sops.templates."jellyseerr-config.json".path}"

              # "jellyserr_api_key:${cfg.apiKeyFile}"
              # "jellyfin_api_key:${cfg.jellyfin.apiKeyFile}"
              # "jellyfin_password:${cfg.jellyfin.passwordFile}"
            ]
            ++ lib.map
            (u: "psw_file_${builtins.hashString "md5" u.name}:${u.passwordFile}")
            (
              lib.filter (u: u.passwordFile != null)
              (lib.attrValues cfg.users)
            )
            ++ lib.map
            (u: "psw_hash_file_${builtins.hashString "md5" u.name}:${u.passwordHashFile}")
            (
              lib.filter (u: u.passwordHashFile != null)
              (lib.attrValues cfg.users)
            );
        };
      };

      # systemd.services.jellyseerr.serviceConfig.ExecStart =
      #   lib.mkForce "cat ${config.services.jellyseerr.configDir}/settings.json";
    };
}
